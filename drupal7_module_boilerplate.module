<?php

/**
 * Implements hook_help()
 */
function drupal7_module_boilerplate_help($path, $arg)
{
    switch ($path) {
        // Add help text to a custom path - in this case the custom types overview page.
        case 'admin/structure/types':
            $output = '<h2>' . t('Help is near: Content Types') . '</h2>';
            $output .= '<p>' . t('On this page you can see available content types and create new ones if necessary.') . '</p>';
            return $output;
    }
}

/**
 * Implements hook_theme()
 */
function drupal7_module_boilerplate_theme()
{
    return array(
        'drupal7_module_boilerplate-custompage' => array(
            'template' => 'drupal7_module_boilerplate-custompage',
            'variables' => array('items'=>NULL)
        ),
        'drupal7_module_boilerplate-block' => array(
            'template' => 'drupal7_module_boilerplate-block',
            'variables' => array('items'=>NULL, 'form'=>NULL)
        )
    );
}

/**
 * Helper function for getting content.
 *
 * !!!Not required!!!
 */
function drupal7_module_boilerplate_contents()
{
    $result = db_query("SELECT n.nid, n.title, n.created FROM node AS n WHERE n.status=1 AND n.type='article' ORDER BY n.created DESC");

    return $result;
}

/**
 * Implements hook_menu()
 */
function drupal7_module_boilerplate_menu()
{
    $items['articles'] = array(
        'title' => 'Articles',
        'page callback' => 'drupal7_module_boilerplate_custompage',
        'access callback' => 'drupal7_module_boilerplate_access',
        'access arguments' => array()
    );

    return $items;
}

/**
 * Access callback function. Defined in drupal7_module_boilerplate_menu().
 */
function drupal7_module_boilerplate_access()
{
    return true;
}

/**
 * Page callback function. Defined in drupal7_module_boilerplate_menu().
 */
function drupal7_module_boilerplate_custompage()
{
    $result = drupal7_module_boilerplate_contents();
    $items = array();
    foreach( $result as $node ) {
        $items[] = array('title' => $node->title, 'url' => drupal_get_path_alias('node/' . $node->nid), 'date' => format_date($node->created, 'medium', 'd.m.Y'));
    }

    return theme('drupal7_module_boilerplate-custompage', array('items' => $items));
}

/**
 * Implements hook_block_info()
 */
function drupal7_module_boilerplate_block_info()
{
    $blocks['d7_boilerplate-articles'] = array(
        'info' => t('Drupal 7 Module Boilerplate'),
        'cache' => DRUPAL_CACHE_PER_ROLE,
    );
    return $blocks;
}

/**
 * Implements hook_block_view()
 */
function drupal7_module_boilerplate_block_view($delta='')
{
    switch ($delta) {
        case 'd7_boilerplate-articles':
            $block['subject'] = t('Articles');
            if (user_access('access content')) {
                $result = drupal7_module_boilerplate_contents();
                $items = array();
                foreach ($result as $node) {
                    $items[] = array('link' => l($node->title, 'node/' . $node->nid));
                }

                if (empty($items)) {
                    $block['content'] = t('No articles available.');
                } else {
                    $block['content'] = theme( 'drupal7_module_boilerplate-block', array('items' => $items, 'form' => drupal_get_form('drupal7_module_boilerplate_form')) );
                }
            }
            return $block;
    }
}

/**
 * Implements hook_form()
 *
 */
function drupal7_module_boilerplate_form($form, &$form_state)
{
    $form = array();
 
    $form['textfield'] = array(
        '#name' => 'text',
        '#type' => 'textfield',
        '#size' => '10'
    );
 
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Submit'
    );
    
    return $form;
}

/**
 * Implements hook_views_api()
 */
function drupal7_module_boilerplate_views_api()
{
    return array(
        'api' => '3.0'
    );
}

/**
 * Implements hook_views_default_views()
 */
function drupal7_module_boilerplate_views_default_views()
{
    $views = array();

    $path = './' . drupal_get_path('module', 'drupal7_module_boilerplate') . '/views/*.inc';
    foreach (glob($path) as $views_filename) {
        require_once($views_filename);
    }

    return $views;
}



